syntax = "proto3";

import "google/protobuf/empty.proto";
import "types/types.proto";

package sentry;

option go_package = "./sentry;sentry";

enum MessageId {
  Status = 0x00;

  // eth64 announcement messages (no id)
  NewBlockHashes = 0x01;
  NewBlock = 0x07;
  Transactions = 0x02;

  // eth65 announcement messages (no id)
  NewPooledTransactionHashes = 0x08;

  // eth66 messages with request-id
  GetBlockHeaders = 0x03;
  GetBlockBodies = 0x05;
  GetNodeData = 0x0d;
  GetReceipts = 0x0f;
  GetPooledTransactions = 0x09;
  BlockHeaders = 0x04;
  BlockBodies = 0x06;
  NodeData = 0x0e;
  Receipts = 0x10;
  PooledTransactions = 0x0a;
}

message OutboundMessageData {
  MessageId id = 1;
  bytes data = 2;
}

message SendMessageByMinBlockRequest {
  OutboundMessageData data = 1;
  uint64 min_block = 2;
}

message SendMessageByIdRequest {
  OutboundMessageData data = 1;
  types.H512 peer_id = 2;
}

message SendMessageToRandomPeersRequest {
  OutboundMessageData data = 1;
  uint64 max_peers = 2;
}

message SentPeers { repeated types.H512 peers = 1; }

enum PenaltyKind { Kick = 0; }

message PenalizePeerRequest {
  types.H512 peer_id = 1;
  PenaltyKind penalty = 2;
}

message PeerMinBlockRequest {
  types.H512 peer_id = 1;
  uint64 min_block = 2;
}

message InboundMessage {
  MessageId id = 1;
  bytes data = 2;
  types.H512 peer_id = 3;
}

message Forks {
  types.H256 genesis = 1;
  repeated uint64 forks = 2;
}

message StatusData {
  uint64 network_id = 1;
  types.H256 total_difficulty = 2;
  types.H256 best_hash = 3;
  Forks fork_data = 4;
  uint64 max_block = 5;
}

service Sentry {
  rpc PenalizePeer(PenalizePeerRequest) returns (google.protobuf.Empty);
  rpc PeerMinBlock(PeerMinBlockRequest) returns (google.protobuf.Empty);
  rpc SendMessageByMinBlock(SendMessageByMinBlockRequest) returns (SentPeers);
  rpc SendMessageById(SendMessageByIdRequest) returns (SentPeers);
  rpc SendMessageToRandomPeers(SendMessageToRandomPeersRequest)
      returns (SentPeers);
  rpc SendMessageToAll(OutboundMessageData) returns (SentPeers);
  rpc SetStatus(StatusData) returns (google.protobuf.Empty);
  rpc ReceiveMessages(google.protobuf.Empty) returns (stream InboundMessage);
  rpc ReceiveUploadMessages(google.protobuf.Empty)
      returns (stream InboundMessage);
  rpc ReceiveTxMessages(google.protobuf.Empty) returns (stream InboundMessage);
}
